fathom id: NXCLHKXQ

# BunPress VitePress-Compatible Blocks & Templates Implementation Plan

## Overview
Implement all VitePress markdown blocks and containers as reusable `.stx` templates in `src/templates/blocks/`, ensuring full VitePress compatibility with proper styling and functionality.

---

## Phase 1: Inline Formatting (Foundation) ✅ COMPLETED

### 1.1 Fix Current Inline Formatting Issues ✅
- [x] Fix underscore italic syntax: `_text_` → `<em>text</em>`
- [x] Fix double underscore bold syntax: `__text__` → `<strong>text</strong>`
- [x] Ensure asterisk syntax works: `*text*` → `<em>text</em>`, `**text**` → `<strong>text</strong>`
- [x] Support strikethrough: `~~text~~` → `<del>text</del>`
- [x] Support subscript: `~text~` → `<sub>text</sub>`
- [x] Support superscript: `^text^` → `<sup>text</sup>`
- [x] Support mark/highlight: `==text==` → `<mark>text</mark>`

**Templates created:** ✅
- `src/templates/blocks/inline/em.stx`
- `src/templates/blocks/inline/strong.stx`
- `src/templates/blocks/inline/del.stx`
- `src/templates/blocks/inline/sub.stx`
- `src/templates/blocks/inline/sup.stx`
- `src/templates/blocks/inline/mark.stx`
- `src/templates/blocks/inline/code.stx`

**Tests created:** ✅ (17/17 passing)
- `test/templates/inline/inline-formatting.test.ts` (comprehensive test suite)

---

## Phase 2: Custom Containers (Priority) ✅ COMPLETED

### 2.1 Info Container ✅
- [x] Create template: `src/templates/blocks/containers/info.stx`
- [x] Syntax: `::: info` or `::: info Custom Title`
- [x] Default icon/styling (blue theme)
- [x] Support custom titles
- [x] Support markdown content inside

### 2.2 Tip Container ✅
- [x] Create template: `src/templates/blocks/containers/tip.stx`
- [x] Syntax: `::: tip` or `::: tip Custom Title`
- [x] Default icon/styling (green theme)

### 2.3 Warning Container ✅
- [x] Create template: `src/templates/blocks/containers/warning.stx`
- [x] Syntax: `::: warning` or `::: warning Custom Title`
- [x] Default icon/styling (yellow/orange theme)

### 2.4 Danger Container ✅
- [x] Create template: `src/templates/blocks/containers/danger.stx`
- [x] Syntax: `::: danger` or `::: danger Custom Title`
- [x] Default icon/styling (red theme)

### 2.5 Details Container ✅
- [x] Create template: `src/templates/blocks/containers/details.stx`
- [x] Syntax: `::: details` or `::: details Custom Summary`
- [x] Collapsible/expandable functionality
- [x] Uses `<details>` and `<summary>` HTML elements

### 2.6 Raw Container ✅
- [x] Create template: `src/templates/blocks/containers/raw.stx`
- [x] Syntax: `::: raw`
- [x] Style isolation (for embedding external content)

**Templates created:** ✅ All 6 container types
**Tests created:** ✅ (12/12 passing)
- `test/templates/containers/containers.test.ts` (comprehensive test suite with 35 assertions)
**CSS Styling:** ✅ Complete theme styling in `src/config.ts`

---

## Phase 3: GitHub-Flavored Alerts ✅ COMPLETED

### 3.1 Note Alert ✅
- [x] Create template: `src/templates/blocks/alerts/note.stx`
- [x] Syntax: `> [!NOTE]` (GitHub-style blockquote alert)
- [x] Equivalent to info container
- [x] Blue theme with note icon (SVG)

### 3.2 Tip Alert ✅
- [x] Create template: `src/templates/blocks/alerts/tip.stx`
- [x] Syntax: `> [!TIP]`
- [x] Green theme with lightbulb icon (SVG)

### 3.3 Important Alert ✅
- [x] Create template: `src/templates/blocks/alerts/important.stx`
- [x] Syntax: `> [!IMPORTANT]`
- [x] Purple theme with megaphone icon (SVG)

### 3.4 Warning Alert ✅
- [x] Create template: `src/templates/blocks/alerts/warning.stx`
- [x] Syntax: `> [!WARNING]`
- [x] Orange theme with triangle icon (SVG)

### 3.5 Caution Alert ✅
- [x] Create template: `src/templates/blocks/alerts/caution.stx`
- [x] Syntax: `> [!CAUTION]`
- [x] Red theme with octagon icon (SVG)

**Templates created:** ✅ All 5 GitHub alert types with official GitHub SVG icons
**Tests created:** ✅ (10/10 passing)
- `test/templates/alerts/github-alerts.test.ts` (comprehensive test suite with 32 assertions)
**CSS Styling:** ✅ Complete GitHub-style theming in `src/config.ts`
**Parser Integration:** ✅ `processGitHubAlerts()` function in `src/serve.ts`

---

## Phase 4: Advanced Code Blocks ✅ COMPLETED (7/7 features)

### 4.1 Line Highlighting ✅
- [x] Implement in `processCodeBlock()` function in `src/serve.ts`
- [x] Syntax: ````js{4}` or ````js{1,4,6-8}`
- [x] Highlight specific lines in code blocks
- [x] Support ranges and individual lines
- [x] Comprehensive CSS styling with yellow highlight background
- [x] Works independently and combined with other features

**Tests:** ✅ (11/11 passing, 27 assertions)
- `test/templates/code/line-highlighting.test.ts`

### 4.2 Line Numbers ✅
- [x] Implement in `processCodeBlock()` function in `src/serve.ts`
- [x] Syntax: ````js:line-numbers` flag
- [x] Add line numbers to code blocks with proper spacing
- [x] Position absolute layout with left offset
- [x] Gray numbers, highlighted in orange for highlighted lines

**Tests:** ✅ (11/11 passing, 43 assertions)
- `test/templates/code/line-numbers.test.ts`

### 4.3 Code Focus ✅
- [x] Implement marker detection in `processCodeBlock()` function
- [x] Syntax: `// [!code focus]` comments in code
- [x] Dim non-focused lines with blur effect
- [x] Highlight focused sections with blue background
- [x] Interactive hover to reveal dimmed content

**Tests:** ✅ (12/12 passing, 36 assertions)
- `test/templates/code/focus-markers.test.ts`

### 4.4 Code Diffs ✅
- [x] Implement diff marker detection in `processCodeBlock()` function
- [x] Syntax: `// [!code ++]` for additions, `// [!code --]` for deletions
- [x] Show added/removed lines with +/- indicators (CSS ::before)
- [x] Green background for additions, red for deletions
- [x] Automatic marker removal from displayed code

**Tests:** ✅ (15/15 passing, 40 assertions)
- `test/templates/code/diff-markers.test.ts`

### 4.5 Code Errors & Warnings ✅
- [x] Implement error/warning marker detection in `processCodeBlock()`
- [x] Syntax: `// [!code error]` or `// [!code warning]`
- [x] Highlight problematic code lines with icons
- [x] Red background with ✕ icon for errors
- [x] Yellow background with ⚠ icon for warnings

**Tests:** ✅ (11/11 passing, 29 assertions)
- `test/templates/code/error-warning-markers.test.ts`

### 4.6 Code Groups (Tabs) ✅
- [x] Implement `processCodeGroups()` function in `src/serve.ts`
- [x] Syntax: `::: code-group` wrapper with multiple code blocks
- [x] Tabbed interface with JavaScript tab switching
- [x] Support multiple languages in same group
- [x] Tab labels from `[label]` syntax in code fence
- [x] Complete CSS styling with active state transitions
- [x] JavaScript `switchCodeTab()` function for interactivity

**Tests:** ✅ (9/9 passing, 30 assertions)
- `test/templates/code/code-groups.test.ts`

### 4.7 Code Imports ✅
- [x] Create `processCodeImports()` function in `src/serve.ts`
- [x] Syntax: `<<< @/filepath` for full file import
- [x] Support line ranges: `<<< @/filepath{1-10}`
- [x] Support regions: `<<< @/filepath#region-name`
- [x] Import code snippets from external files
- [x] Automatic language detection from file extension
- [x] Support for 20+ programming languages
- [x] Region markers: `#region name / #endregion`, `// region name / // endregion`, `# region name / # endregion`
- [x] Error handling for missing files and invalid regions
- [x] Path resolution using node:path.join()
- [x] Processes BEFORE code groups for proper integration
- [x] Optional label syntax support: `<<< @/filepath [label]`

**Implementation:** `src/serve.ts:307-398`
- `processCodeImports()` function with comprehensive regex parsing
- Reverse iteration for safe string replacement
- Bun.file() API for efficient file reading
- Language map with 20+ extensions (js, ts, py, rb, go, rs, java, etc.)
- Line range conversion (1-indexed user input → 0-indexed array operations)
- Multi-pattern region detection for different comment styles

**Test Fixtures:** ✅
- `test/markdown/code/snippets/example.js` (JavaScript with #region markers)
- `test/markdown/code/snippets/example.ts` (TypeScript with #region markers)
- `test/markdown/code/snippets/example.py` (Python with # region markers)

**Tests:** ✅ (14/14 passing, 60 assertions)
- `test/templates/code/code-imports.test.ts`
- Full file imports (JS, TS, Python)
- Line range imports (specific sections)
- Region imports (named code regions)
- Multiple imports per page
- Error handling (missing files, invalid regions)
- Integration with other code features
- Mixed content scenarios

---

**Phase 4 Summary:** ✅ **100% COMPLETE**
- **Features Implemented:** 7/7 (100% complete)
- **Total Tests:** 83 passing (265 assertions)
- **Test Files:** 7 comprehensive test suites
- **Test Fixtures:** 3 sample code files for import testing
- **CSS:** ~200 lines of styling for all features
- **JavaScript:** Tab switching functionality for code groups
- **All features work independently AND can be combined together**
- **VitePress feature parity achieved for all code block functionality**

---

## Phase 5: Content Features

### 5.1 Table of Contents
- [ ] Create template: `src/templates/blocks/toc.stx`
- [ ] Syntax: `[[toc]]` macro
- [ ] Already partially implemented, needs template extraction
- [ ] Configurable depth (minDepth, maxDepth)
- [ ] Auto-generated from headings

**Test:** `test/templates/toc.test.ts` (enhance existing)

### 5.2 Custom Header Anchors ✅
- [x] Implement custom ID support in `addHeadingIds()` function
- [x] Syntax: `## Heading {#custom-id}`
- [x] Allow custom IDs for headings (alphanumeric, hyphens, underscores)
- [x] Override auto-generated slugs
- [x] Remove `{#custom-id}` syntax from display text
- [x] Maintain backward compatibility with auto-generated IDs
- [x] Integrate with TOC (custom IDs in links)
- [x] Support for h2, h3, h4 headings

**Implementation:** `src/serve.ts:79-108` - `addHeadingIds()` function with custom anchor detection
**Test:** ✅ (14/14 passing, 41 assertions)
- `test/templates/content/custom-header-anchors.test.ts`
- Basic custom anchors (h2, h3, h4)
- Custom ID formats (hyphens, underscores, numbers)
- Auto-generated IDs fallback
- Multiple headings (mixed custom and auto)
- TOC integration
- Edge cases (whitespace, inline code, emphasis)
- VitePress compatibility

### 5.3 Emoji Support ✅
- [x] Implement `processEmoji()` function
- [x] Syntax: `:tada:`, `:rocket:`, etc.
- [x] Convert emoji shortcodes to Unicode emoji
- [x] Support 150+ common emoji shortcodes
- [x] Categories: Smileys, Symbols, Objects, Nature, Food, Places, Activities, Flags
- [x] Works in headings, paragraphs, lists, containers, and alerts
- [x] Graceful fallback for unknown emojis (keeps original shortcode)
- [x] Integrated into markdown processing pipeline

**Implementation:** `src/serve.ts:289-488` - `processEmoji()` function with comprehensive emoji map
**Test:** ✅ (19/19 passing, 52 assertions)
- `test/templates/content/emoji.test.ts`
- Basic emojis (:tada:, :rocket:, :fire:)
- Multiple emojis (same line, different paragraphs)
- All emoji categories (smileys, symbols, objects, etc.)
- Emojis in headings, lists, containers, alerts
- Unknown emoji handling (graceful fallback)
- Edge cases (consecutive emojis, line positions)
- Common documentation emojis

### 5.4 Badges ✅
- [x] Implement `processBadges()` function
- [x] Syntax: `<Badge type="info|tip|warning|danger" text="v2.0" />`
- [x] Inline status badges with VitePress-style colors
- [x] Support all badge types: info (blue), tip (green), warning (orange), danger (red)
- [x] Default to info type when not specified
- [x] Case-insensitive type matching
- [x] Flexible attribute order (type and text can be in any order)
- [x] Works in headings, paragraphs, lists, containers, and alerts
- [x] Inline display (span-based) with proper styling
- [x] Integrated into markdown processing pipeline (after emoji)

**Implementation:** `src/serve.ts:490-518` - `processBadges()` function with flexible attribute parsing
**Test:** ✅ (23/23 passing, 77 assertions)
- `test/templates/content/badges.test.ts`
- Basic badge types (info, tip, warning, danger)
- Badge defaults (type, empty text)
- Multiple badges (same line, different paragraphs)
- Badge text content (versions, statuses, multi-word, special chars)
- Badges in headings (h2, h3)
- Badges in lists
- Badges in containers and alerts
- Case sensitivity (uppercase Badge tag, mixed case types)
- Edge cases (no spaces, emoji in text, attribute order variations)
- Common documentation use cases

---

**Phase 5 Summary (Partial):**
- **Features Implemented:** 3/4 (75% complete) - 5.2, 5.3, 5.4 ✅ | 5.1 pending
- **Total Tests:** 56 passing (170 assertions)
- **Test Files:** 3 comprehensive test suites (custom-header-anchors, emoji, badges)
- **Processing Functions:** `addHeadingIds()`, `processEmoji()`, `processBadges()`
- **Emoji Support:** 150+ emoji shortcodes across 8 categories
- **Badge Types:** 4 types (info, tip, warning, danger) with VitePress-style colors
- **All features work in headings, paragraphs, lists, containers, and alerts**
- **VitePress feature parity achieved for custom anchors, emojis, and badges**

---

## Phase 6: File Inclusion

### 6.1 Markdown File Inclusion
- [ ] Create template: `src/templates/blocks/include/markdown.stx`
- [ ] Syntax: `<!--@include: ./file.md-->`
- [ ] Support line ranges: `<!--@include: ./file.md{10-20}-->`
- [ ] Support regions: `<!--@include: ./file.md{#region}-->`
- [ ] Recursive inclusion support

**Test:** `test/templates/include/markdown.test.ts`

### 6.2 Code Snippet Inclusion
- [ ] Create template: `src/templates/blocks/include/code.stx`
- [ ] Syntax: `<<< @/snippets/example.js`
- [ ] Import code with syntax highlighting
- [ ] Support all code import features (regions, ranges)

**Test:** `test/templates/include/code.test.ts`

---

## Phase 7: Math & Diagrams (Optional/Advanced)

### 7.1 Math Equations
- [ ] Create template: `src/templates/blocks/math/inline.stx`
- [ ] Create template: `src/templates/blocks/math/block.stx`
- [ ] Syntax: `$inline math$` or `$$\nblock math\n$$`
- [ ] Support LaTeX/KaTeX rendering
- [ ] Integrate markdown-it-mathjax3 or similar

**Test:** `test/templates/math/math.test.ts`

### 7.2 Mermaid Diagrams
- [ ] Create template: `src/templates/blocks/diagram/mermaid.stx`
- [ ] Syntax: ````mermaid` code blocks
- [ ] Render flowcharts, sequence diagrams, etc.
- [ ] Client-side rendering

**Test:** `test/templates/diagram/mermaid.test.ts`

---

## Phase 8: Link & Image Enhancements

### 8.1 Internal Links
- [ ] Create template: `src/templates/blocks/link/internal.stx`
- [ ] Auto-convert internal markdown links to SPA navigation
- [ ] Add `.html` suffix handling
- [ ] Preserve hash fragments

**Test:** `test/templates/link/internal.test.ts`

### 8.2 External Links
- [ ] Create template: `src/templates/blocks/link/external.stx`
- [ ] Auto-add `target="_blank" rel="noreferrer"` to external links
- [ ] Optional external link icon

**Test:** `test/templates/link/external.test.ts`

### 8.3 Image Lazy Loading
- [ ] Create template: `src/templates/blocks/image/lazy.stx`
- [ ] Syntax: `![alt](src)` with lazy loading
- [ ] Configurable via `markdown.image.lazyLoading`
- [ ] Add loading="lazy" attribute

**Test:** `test/templates/image/lazy.test.ts`

### 8.4 Image Captions
- [ ] Create template: `src/templates/blocks/image/caption.stx`
- [ ] Syntax: `![alt](src "caption")`
- [ ] Render image with figure/figcaption
- [ ] Style captions

**Test:** `test/templates/image/caption.test.ts`

---

## Phase 9: Table Enhancements

### 9.1 Table Alignment
- [ ] Update template: `src/templates/blocks/table/alignment.stx`
- [ ] Syntax: `| :--- | :---: | ---: |` (left, center, right)
- [ ] Apply CSS text-align to columns
- [ ] Already partially implemented in serve.ts

**Test:** `test/templates/table/alignment.test.ts`

### 9.2 Table Styling
- [ ] Create template: `src/templates/blocks/table/styled.stx`
- [ ] Striped rows
- [ ] Hover effects
- [ ] Responsive tables (horizontal scroll on mobile)

**Test:** `test/templates/table/styled.test.ts`

---

## Phase 10: Integration & Parser Updates

### 10.1 Update Markdown Parser
- [ ] Update `src/serve.ts` `markdownToHtml()` function
- [ ] Add container parsing (`::: type`)
- [ ] Add alert parsing (`> [!TYPE]`)
- [ ] Add inline formatting fixes
- [ ] Use template rendering for all blocks

### 10.2 Plugin System Integration
- [ ] Uncomment and update `src/plugin.ts`
- [ ] Integrate all block templates
- [ ] Use marked.js extensions where appropriate
- [ ] Ensure Shiki integration for syntax highlighting

### 10.3 Configuration
- [ ] Add block configuration options to `src/types.ts`
- [ ] Add enable/disable flags for each block type
- [ ] Add customization options (colors, icons, etc.)
- [ ] Update `src/config.ts` with defaults

---

## Test Plan Structure

### Test Organization
```
test/
├── templates/              # NEW: Template-specific tests
│   ├── inline/
│   │   ├── em.test.ts
│   │   ├── strong.test.ts
│   │   ├── del.test.ts
│   │   ├── sub.test.ts
│   │   ├── sup.test.ts
│   │   └── mark.test.ts
│   ├── containers/
│   │   ├── info.test.ts
│   │   ├── tip.test.ts
│   │   ├── warning.test.ts
│   │   ├── danger.test.ts
│   │   ├── details.test.ts
│   │   └── raw.test.ts
│   ├── alerts/
│   │   ├── note.test.ts
│   │   ├── tip.test.ts
│   │   ├── important.test.ts
│   │   ├── warning.test.ts
│   │   └── caution.test.ts
│   ├── code/
│   │   ├── line-highlight.test.ts
│   │   ├── line-numbers.test.ts
│   │   ├── focus.test.ts
│   │   ├── diff.test.ts
│   │   ├── error-warning.test.ts
│   │   ├── code-group.test.ts
│   │   └── import.test.ts
│   ├── toc.test.ts
│   ├── heading-anchor.test.ts
│   ├── emoji.test.ts
│   ├── badge.test.ts
│   ├── include/
│   │   ├── markdown.test.ts
│   │   └── code.test.ts
│   ├── math/
│   │   └── math.test.ts
│   ├── diagram/
│   │   └── mermaid.test.ts
│   ├── link/
│   │   ├── internal.test.ts
│   │   └── external.test.ts
│   ├── image/
│   │   ├── lazy.test.ts
│   │   └── caption.test.ts
│   └── table/
│       ├── alignment.test.ts
│       └── styled.test.ts
└── blocks/                 # EXISTING: Keep integration tests
    ├── container-extensions/
    ├── tip/
    ├── typography/
    └── code-blocks/
```

### Test Coverage Requirements

Each template test file should include:

1. **Parsing Tests**
   - [ ] Correct syntax recognition
   - [ ] Edge cases (empty content, special characters)
   - [ ] Nested structures (where applicable)

2. **Rendering Tests**
   - [ ] HTML output validation
   - [ ] CSS class names
   - [ ] Proper escaping

3. **Integration Tests**
   - [ ] Works with other blocks
   - [ ] Doesn't break existing functionality
   - [ ] Config options respected

4. **Snapshot Tests**
   - [ ] Visual regression testing
   - [ ] Compare rendered output against expected

5. **Accessibility Tests**
   - [ ] Proper semantic HTML
   - [ ] ARIA attributes where needed
   - [ ] Keyboard navigation (for interactive blocks)

---

## Implementation Priority

### Must-Have (Phase 1-3)
1. Fix inline formatting (bold, italic with both * and _)
2. Custom containers (info, tip, warning, danger, details)
3. GitHub alerts (note, tip, important, warning, caution)

### Should-Have (Phase 4-6)
4. Advanced code blocks (line highlighting, diffs, focus)
5. Code groups (tabs)
6. File inclusion (markdown and code)

### Nice-to-Have (Phase 7-9)
7. Math equations
8. Mermaid diagrams
9. Enhanced images and links

---

## Success Criteria

- [x] All VitePress markdown extensions supported (Phases 1-3 complete)
- [x] 100% test coverage for all templates (39/39 tests passing)
- [ ] Documentation for each block type
- [ ] Performance benchmarks (parsing speed)
- [x] Visual parity with VitePress output
- [x] Configurable via `bunpress.config.ts`
- [x] Backward compatible with existing BunPress projects

---

## Future Enhancement: Themeable Look & Feel System

### Problem Statement
Currently, all CSS is embedded in `src/config.ts`, making the config file very large (400+ lines). This approach doesn't scale well for supporting multiple documentation themes/styles.

### Proposed Solution: Theme System

Create a pluggable theme system where different documentation styles can be easily swapped:

#### Directory Structure
```
src/
├── themes/
│   ├── vitepress/           # Current VitePress look & feel (DEFAULT)
│   │   ├── index.ts         # Theme config and exports
│   │   ├── base.css         # Base typography, layout, colors
│   │   ├── containers.css   # Custom container styles
│   │   ├── alerts.css       # GitHub alert styles
│   │   ├── code.css         # Code block styles (future)
│   │   └── components.css   # Navigation, sidebar, TOC
│   │
│   ├── bun/                 # Bun documentation look & feel
│   │   ├── index.ts
│   │   ├── base.css
│   │   ├── containers.css
│   │   ├── alerts.css
│   │   └── components.css
│   │
│   ├── github/              # GitHub-style documentation
│   │   └── ...
│   │
│   ├── nextra/              # Nextra-inspired theme
│   │   └── ...
│   │
│   └── minimal/             # Minimalist theme
│       └── ...
```

#### Implementation Plan

**Step 1: Extract Current CSS to VitePress Theme**
- [ ] Create `src/themes/vitepress/` directory structure
- [ ] Move inline formatting CSS to `src/themes/vitepress/base.css`
- [ ] Move container styles to `src/themes/vitepress/containers.css`
- [ ] Move GitHub alert styles to `src/themes/vitepress/alerts.css`
- [ ] Move navigation/sidebar/TOC to `src/themes/vitepress/components.css`
- [ ] Create `src/themes/vitepress/index.ts` theme config

**Step 2: Create Theme Loader System**
- [ ] Add `src/themes/loader.ts` - Theme loading and switching logic
- [ ] Add `src/themes/types.ts` - Theme configuration TypeScript types
- [ ] Support theme selection via `bunpress.config.ts`: `theme: 'vitepress'`
- [ ] Default to VitePress theme for backward compatibility

**Step 3: Implement Bun Theme**
- [ ] Research Bun documentation styling (colors, typography, components)
- [ ] Create `src/themes/bun/` with Bun-inspired styles
- [ ] Match Bun's color palette (black, pink, cream aesthetic)
- [ ] Implement Bun-style navigation and layout

**Step 4: Theme Configuration API**
- [ ] Support theme customization via config:
  ```ts
  export default {
    theme: 'vitepress', // or 'bun', 'github', etc.
    themeConfig: {
      // Override theme-specific settings
      colors: { primary: '#5672cd' },
      fonts: { sans: 'Inter, sans-serif' },
    }
  }
  ```
- [ ] Allow CSS variable overrides
- [ ] Support custom theme paths: `theme: './my-custom-theme'`

**Step 5: Theme Switching & Hot Reload**
- [ ] Implement theme switching in dev mode
- [ ] Add CLI command: `bunpress theme list` (show available themes)
- [ ] Add CLI command: `bunpress theme preview <name>` (preview a theme)
- [ ] Hot reload CSS when theme files change in dev mode

**Step 6: Documentation & Examples**
- [ ] Document theme structure and API
- [ ] Create theme creation guide
- [ ] Add theme comparison screenshots
- [ ] Example: Custom theme tutorial

#### Theme Feature Parity
Each theme should support:
- ✅ Inline formatting (bold, italic, code, etc.)
- ✅ Custom containers (info, tip, warning, danger, details)
- ✅ GitHub alerts (note, tip, important, warning, caution)
- 🔲 Code blocks with syntax highlighting (Phase 4)
- 🔲 Tables (Phase 9)
- 🔲 Navigation, sidebar, TOC
- 🔲 Dark mode support
- 🔲 Responsive design
- 🔲 Accessibility (WCAG AA)

#### Theme Gallery (Planned)
1. **VitePress** (Default) - Vue documentation style
2. **Bun** - Modern, sleek, with pink/cream aesthetic
3. **GitHub** - GitHub-flavored markdown style
4. **Nextra** - Vercel/Next.js docs style
5. **Minimal** - Clean, distraction-free
6. **Docusaurus** - Meta's documentation style
7. **GitBook** - GitBook-inspired theme

#### Benefits
- ✅ Smaller config files (CSS moved to theme files)
- ✅ Easy to switch between documentation styles
- ✅ Community can contribute new themes
- ✅ Better maintainability (theme-specific CSS isolated)
- ✅ Theme marketplace potential
- ✅ Consistent API across themes

#### Migration Path
- Default theme remains VitePress for backward compatibility
- Existing projects continue to work without changes
- Users can opt-in to new themes via config
- Gradual migration guide for custom CSS

---

## Phase 11: CLI Improvements & Missing Commands

### 11.1 Install Script Generation
- [ ] Implement `bunpress install` command
- [ ] Generate installation script for BunPress
- [ ] Support multiple package managers (npm, yarn, pnpm, bun)
- [ ] Include setup wizard for new projects
- [ ] Auto-detect project structure
- [ ] Create default `bunpress.config.ts` if missing

**Test:** `test/cli/install.test.ts`

### 11.2 Build Command Enhancements
- [ ] Add `--watch` flag to build command
- [ ] Add `--minify` flag for production builds
- [ ] Add `--sourcemap` flag for debugging
- [ ] Improve build output formatting and colors
- [ ] Add build time statistics
- [ ] Show file size information
- [ ] Add progress indicators for large builds

**Test:** `test/cli/build.test.ts`

### 11.3 Dev Server Improvements
- [ ] Add hot module replacement (HMR)
- [ ] Improve file watching performance
- [ ] Add WebSocket for live reload
- [ ] Better error reporting in browser
- [ ] Add dev server API for plugins
- [ ] Support custom middleware

**Test:** `test/cli/dev.test.ts`

### 11.4 New CLI Commands
- [ ] `bunpress init` - Initialize new BunPress project
- [ ] `bunpress preview` - Preview production build locally
- [ ] `bunpress export` - Export static site
- [ ] `bunpress serve` - Serve built site (production mode)
- [ ] `bunpress clean` - Clean build artifacts
- [ ] `bunpress doctor` - Diagnose common issues

**Test:** `test/cli/commands.test.ts`

### 11.5 Configuration Management
- [ ] `bunpress config show` - Display current configuration
- [ ] `bunpress config validate` - Validate config file
- [ ] `bunpress config init` - Create default config
- [ ] Support `.bunpressrc` JSON config
- [ ] Support environment-specific configs

**Test:** `test/cli/config.test.ts`

### 11.6 Plugin Management
- [ ] `bunpress plugin list` - List installed plugins
- [ ] `bunpress plugin add <name>` - Add plugin to project
- [ ] `bunpress plugin remove <name>` - Remove plugin
- [ ] `bunpress plugin search <query>` - Search plugin registry
- [ ] Plugin scaffolding: `bunpress plugin create <name>`

**Test:** `test/cli/plugin-management.test.ts`

### 11.7 Theme Management
- [ ] `bunpress theme list` - List available themes
- [ ] `bunpress theme use <name>` - Switch theme
- [ ] `bunpress theme preview <name>` - Preview theme
- [ ] `bunpress theme create <name>` - Create custom theme
- [ ] Theme installation from npm or git

**Test:** `test/cli/theme-management.test.ts`

### 11.8 Content Management
- [ ] `bunpress new <path>` - Create new markdown file with frontmatter template
- [ ] `bunpress validate` - Validate all markdown files
- [ ] `bunpress lint` - Lint markdown content
- [ ] `bunpress search <query>` - Search documentation content
- [ ] `bunpress stats` - Show content statistics

**Test:** `test/cli/content.test.ts`

### 11.9 Deployment Commands
- [ ] `bunpress deploy` - Deploy to various platforms
- [ ] Support Vercel deployment
- [ ] Support Netlify deployment
- [ ] Support GitHub Pages deployment
- [ ] Support Cloudflare Pages deployment
- [ ] Support custom deployment scripts

**Test:** `test/cli/deploy.test.ts`

### 11.10 Developer Tools
- [ ] `bunpress debug` - Start debug mode with verbose logging
- [ ] `bunpress analyze` - Analyze bundle size and dependencies
- [ ] `bunpress benchmark` - Run performance benchmarks
- [ ] `bunpress inspect <file>` - Inspect markdown parsing output
- [ ] `bunpress generate-types` - Generate TypeScript types for config

**Test:** `test/cli/dev-tools.test.ts`

### 11.11 Interactive CLI
- [ ] Add interactive mode with prompts
- [ ] Use `@clack/prompts` for better UX
- [ ] Support command shortcuts
- [ ] Add command aliases
- [ ] Add command history
- [ ] Add auto-completion support

**Test:** `test/cli/interactive.test.ts`

### 11.12 CLI Help & Documentation
- [ ] Improve `--help` output with examples
- [ ] Add `bunpress help <command>` for detailed help
- [ ] Add `bunpress version` with detailed version info
- [ ] Add `bunpress upgrade` to check for updates
- [ ] Add ASCII art banner (optional, configurable)
- [ ] Add tips and suggestions in CLI output

**Test:** `test/cli/help.test.ts`

---

**Phase 11 Summary:**
- **Commands to Implement:** 40+ CLI commands and improvements
- **Categories:** Installation, Build, Dev Server, Config, Plugins, Themes, Content, Deployment, Developer Tools, Interactive, Help
- **Focus:** Developer experience, productivity, and ease of use
- **Tools:** `@stacksjs/clapp` for CLI framework, `@clack/prompts` for interactive prompts
- **Testing:** Comprehensive CLI testing with mock filesystem and stdio

---

## Phase 12: SEO & Sitemap Generation

### 12.1 XML Sitemap Generation
- [ ] Implement automatic sitemap.xml generation
- [ ] Crawl all markdown files in docs directory
- [ ] Extract URLs from file structure
- [ ] Support custom URL mapping via frontmatter
- [ ] Add `<lastmod>` from file modification time
- [ ] Add `<changefreq>` configuration
- [ ] Add `<priority>` configuration
- [ ] Support multi-sitemap index for large sites (50,000+ URLs)
- [ ] Configurable via `bunpress.config.ts`:
  ```ts
  sitemap: {
    hostname: 'https://example.com',
    exclude: ['/private/**'],
    changefreq: 'weekly',
    priority: 0.5,
    lastmod: true
  }
  ```

**Implementation:** `src/sitemap.ts`
**Test:** `test/sitemap/generation.test.ts`

### 12.2 Robots.txt Generation
- [ ] Generate robots.txt automatically
- [ ] Link to sitemap.xml
- [ ] Support custom user-agent rules
- [ ] Support allow/disallow patterns
- [ ] Configurable via `bunpress.config.ts`:
  ```ts
  robots: {
    userAgent: '*',
    allow: '/',
    disallow: ['/private/', '/admin/'],
    sitemap: true
  }
  ```

**Implementation:** `src/robots.ts`
**Test:** `test/sitemap/robots.test.ts`

### 12.3 Meta Tags & Open Graph
- [ ] Auto-generate meta description from content
- [ ] Support Open Graph tags for social sharing
- [ ] Support Twitter Card tags
- [ ] Extract from frontmatter or auto-generate
- [ ] Configurable defaults via `bunpress.config.ts`:
  ```ts
  meta: {
    siteName: 'My Docs',
    siteDescription: 'Documentation site',
    twitterCard: 'summary_large_image',
    ogImage: '/og-image.png'
  }
  ```

**Implementation:** Update `src/serve.ts` template rendering
**Test:** `test/seo/meta-tags.test.ts`

### 12.4 Canonical URLs
- [ ] Add canonical link tags to prevent duplicate content
- [ ] Auto-detect from hostname config
- [ ] Support custom canonical URLs in frontmatter
- [ ] Handle trailing slashes consistently

**Test:** `test/seo/canonical.test.ts`

### 12.5 Structured Data (JSON-LD)
- [ ] Generate JSON-LD structured data
- [ ] Support Article schema
- [ ] Support Breadcrumb schema
- [ ] Support WebSite schema
- [ ] Configurable via frontmatter

**Test:** `test/seo/structured-data.test.ts`

### 12.6 RSS Feed Generation
- [ ] Generate RSS/Atom feed for documentation updates
- [ ] Support blog-style documentation
- [ ] Extract from frontmatter (date, author, etc.)
- [ ] Configurable feed settings

**Test:** `test/sitemap/rss.test.ts`

### 12.7 SEO Validation & Reporting
- [ ] CLI command: `bunpress seo check`
- [ ] Validate all pages for SEO best practices
- [ ] Check for missing meta descriptions
- [ ] Check for duplicate titles
- [ ] Check for broken internal links
- [ ] Generate SEO report

**Test:** `test/cli/seo-check.test.ts`

---

**Phase 12 Summary:**
- **Focus:** Search engine optimization and discoverability
- **Features:** Sitemap, robots.txt, meta tags, Open Graph, structured data, RSS
- **Automation:** Auto-generate from content and configuration
- **Validation:** SEO checking and reporting tools
- **VitePress Parity:** Matches and extends VitePress SEO capabilities

---

## Notes

- Use `.stx` template engine for all blocks (consistent with existing templates)
- Leverage `@stacksjs/headwind` for styling (not UnoCSS)
- Ensure templates are composable and reusable
- Add proper TypeScript types for all block configurations
- Consider adding a CLI command to list available blocks
- Document migration path from VitePress to BunPress
- **Theme system should be implemented after Phase 4-6 completion**
